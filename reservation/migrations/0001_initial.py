# Generated by Django 4.0.4 on 2023-06-18 11:22

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AmenityCategory',
            fields=[
                ('amenity_cat_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'amenity_category',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('city_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
                ('province', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'city',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('event_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=30)),
                ('sport_type', models.CharField(max_length=30)),
                ('status', models.CharField(max_length=30)),
                ('calendar_entry_calendar_entry_id', models.IntegerField(unique=True)),
                ('pitch_capacity', models.IntegerField()),
                ('city_name', models.CharField(max_length=30)),
                ('city_province', models.CharField(max_length=30)),
                ('periodic_event_periodic_event_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'event',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Facility',
            fields=[
                ('facility_id', models.AutoField(primary_key=True, serialize=False)),
                ('address', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'facility',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Frequency',
            fields=[
                ('frequency_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'frequency',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GearType',
            fields=[
                ('gear_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'gear_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
                ('team_event_id', models.IntegerField()),
            ],
            options={
                'db_table': 'group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PeriodicEvent',
            fields=[
                ('periodic_event_id', models.AutoField(primary_key=True, serialize=False)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
            ],
            options={
                'db_table': 'periodic_event',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('permission_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Pitch',
            fields=[
                ('pitch_id', models.AutoField(primary_key=True, serialize=False)),
                ('capacity', models.IntegerField()),
            ],
            options={
                'db_table': 'pitch',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PitchType',
            fields=[
                ('pitch_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'pitch_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('event_id', models.IntegerField(primary_key=True, serialize=False)),
                ('pay_status', models.CharField(max_length=1)),
            ],
            options={
                'db_table': 'reservation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SportGear',
            fields=[
                ('sport_gear_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'sport_gear',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SportType',
            fields=[
                ('sport_type_id', models.IntegerField(primary_key=True, serialize=False)),
                ('sport_type_name', models.CharField(max_length=1)),
            ],
            options={
                'db_table': 'sport_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StatCity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('month', models.IntegerField()),
                ('quantity', models.IntegerField()),
            ],
            options={
                'db_table': 'stat_city',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StatSportType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('month', models.IntegerField()),
                ('quantity', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'stat_sport_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('team_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
                ('event_id', models.IntegerField()),
            ],
            options={
                'db_table': 'team',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('password', models.CharField(max_length=30)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('date_of_birth', models.DateField()),
                ('email', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WeekDay',
            fields=[
                ('week_day_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'week_day',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Affiliation',
            fields=[
                ('user_user', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='reservation.user')),
                ('team_event_id', models.IntegerField()),
            ],
            options={
                'db_table': 'affiliation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Casual',
            fields=[
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='reservation.event')),
                ('num_users', models.IntegerField()),
                ('pitch_capacity', models.IntegerField()),
                ('places_available', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'casual',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Competitive',
            fields=[
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='reservation.event')),
                ('num_teams', models.IntegerField()),
                ('max_num_teams', models.IntegerField()),
                ('teams_available', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'competitive',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Single',
            fields=[
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='reservation.reservation')),
            ],
            options={
                'db_table': 'single',
                'managed': False,
            },
        ),
    ]
